function [cpustr, gpustr] = install(cpucompiler, gpucompiler, cuda_arch, enzyme)

if nargin<1
    cpucompiler = "";
buildcorelibraries(cpucompiler, gpucompiler, cuda_arch);
[cpustr, gpustr] = buildexecutable(cpucompiler, gpucompiler, cuda_arch, enzyme);

% if (nargin<1) || (isempty(char(cpucompiler))==1)
%     [clang,found] = findexec("clang++");
%     if found==1
%         cpucompiler = clang;
%     else
%         [gcc,found] = findexec("g++");
%         if found==1
%             cpucompiler = gcc;
%         end
%     end    
%     if found==0
%         error("MDP could not find C++ compiler. Please set cpucompiler to the path of a C++ compiler.");
%     end
% end
% 
% if (nargin<2) || (isempty(char(gpucompiler))==1)
%     [clang,foundgpu] = findexec("clang++");
%     if foundgpu==1
%         gpucompiler = clang;
%     else
%         [nvcc,foundgpu] = findexec("nvcc");
%         if foundgpu==1
%             gpucompiler = nvcc;
%         end
%     end    
%     [~,foundnvcc] = findexec("nvcc");
%     if (foundgpu==0) || (foundnvcc==0)
%         warning("Because MDP could not find CUDA Toolkit on your system, you will not be able to run MDP on Nvidia GPUs.");
%         gpucompiler = ""; 
%         gpumacros = "";
%     end
% end
% 
% if (isempty(char(gpucompiler))==0)
%     if (nargin<3) || (isempty(char(cuda_arch))==1)
%         if contains(gpucompiler,"nvcc")
%             gpumacros = " -arch=sm_60 ";
%         else
%             gpumacros = " --cuda-gpu-arch=sm_60 ";
%         end
%     else
%         if contains(gpucompiler,"nvcc")
%             gpumacros = " -arch=" + cuda_arch + " ";
%         else
%             gpumacros = " --cuda-gpu-arch=" + cuda_arch + " ";
%         end
%     end
% end
% 
% if (nargin<4) || (isempty(char(enzyme))==1)
%     enzyme = "";
%     enzymemacros = "";
% else    
%     enzymemacros = "-D _ENZYME";
% end
% 
% disp("Building core libraries ...");
% 
% if exist("../C++/Core/cpuCore.o", "file")
%     delete(char("../C++/Core/cpuCore.o"));
% end
% if exist("../C++/Core/cpuCore.a", "file")
%     delete(char("../C++/Core/cpuCore.a"));
% end
% if exist("../C++/Core/libcpuCore.dylib", "file")
%     delete(char("../C++/Core/libcpuCore.dylib"));
% end
% if exist("../C++/Core/libcpuCore.so", "file")
%     delete(char("../C++/Core/libcpuCore.so"));
% end
% if exist("../C++/Core/gpuCore.o", "file")
%     delete(char("../C++/Core/gpuCore.o"));
% end
% if exist("../C++/Core/gpuCore.a", "file")
%     delete(char("../C++/Core/gpuCore.a"));
% end
% if exist("../C++/Core/libgpuCore.dylib", "file")
%     delete(char("../C++/Core/libgpuCore.dylib"));
% end
% if exist("../C++/Core/libgpuCore.so", "file")
%     delete(char("../C++/Core/libgpuCore.so"));
% end
% 
% comstr = cpucompiler + " -fPIC -ffast-math -O3 -c ../C++/Core/cpuCore.cpp -o ../C++/Core/cpuCore.o";
% eval(char("!" + comstr));
% comstr = "ar rvs ../C++/Core/cpuCore.a ../C++/Core/cpuCore.o";
% eval(char("!" + comstr));
% if ismac==1
%     comstr = cpucompiler + " --shared ../C++/Core/cpuCore.o -o ../C++/Core/libcpuCore.dylib";
% else
%     comstr = cpucompiler + " --shared ../C++/Core/cpuCore.o -o ../C++/Core/libcpuCore.so";
% end
% eval(char("!" + comstr));
% 
% if (isempty(char(gpucompiler))==0)
%     if contains(gpucompiler,"nvcc")
%         gpuflags = " --compiler-options '-fPIC' ";
%     else
%         gpuflags = " -fPIC ";
%     end
%     comstr = gpucompiler + " -std=c++11 " + gpuflags + gpumacros + " -D_FORCE_INLINES -O3 -c -w ../C++/Core/gpuCore.cu -o ../C++/Core/gpuCore.o";
%     eval(char("!" + comstr));
%     comstr = "ar rvs ../C++/Core/gpuCore.a ../C++/Core/gpuCore.o";
%     eval(char("!" + comstr));
%     if ismac==1
%         comstr = gpucompiler + gpuflags + "--shared ../C++/Core/gpuCore.o -o ../C++/Core/libgpuCore.dylib";
%     else
%         comstr = gpucompiler + gpuflags + "--shared ../C++/Core/gpuCore.o -o ../C++/Core/libgpuCore.so";
%     end
%     eval(char("!" + comstr));
% end

% disp("Building executable ...");
% 
% cdir = pwd(); 
% cd(char("../C++/Main"));
% 
% cplstr = cpucompiler + " -fPIC -ffast-math -O3 -c ../Potentials/cpuEmpiricalPotentials.cpp -o ../Potentials/cpuEmpiricalPotentials.o";
% eval(char("!" + cplstr));    
% if ismac==1
%     comstr = cpucompiler + " --shared ../Potentials/cpuEmpiricalPotentials.o -o ../Potentials/cpuEmpiricalPotentials.dylib";
%     potlib = "../Potentials/cpuEmpiricalPotentials.dylib";
% else
%     comstr = cpucompiler + " --shared ../Potentials/cpuEmpiricalPotentials.o -o ../Potentials/cpuEmpiricalPotentials.so";
%     potlib = "../Potentials/cpuEmpiricalPotentials.so";
% end
% eval(char("!" + comstr));
% %cpustr = cpucompiler + " -std=c++11 " + enzymemacros + " main.cpp -o cpuMDP ../Core/cpuCore.a ../Potentials/cpuEmpiricalPotentials.o -ffast-math -O3 -lblas -llapack " + enzyme;
% cpustr = cpucompiler + " -std=c++11 " + enzymemacros + " main.cpp -o cpuMDP ../Core/cpuCore.a -ffast-math -O3 -lblas -llapack " + potlib + " " + enzyme;
% eval(char("!" + cpustr));
% 
% if ~isempty(char(gpucompiler))
%     cplstr = gpucompiler + " -std=c++11 " + gpuflags + gpumacros  + enzymemacros + " -O3 -D_FORCE_INLINES -c -w ../Potentials/gpuEmpiricalPotentials.cu -o ../Potentials/gpuEmpiricalPotentials.o " + enzyme; 
%     eval(char("!" + cplstr));
%     if ismac==1
%         comstr = gpucompiler + gpuflags + "--shared ../Potentials/gpuEmpiricalPotentials.o -o ../Potentials/gpuEmpiricalPotentials.dylib";
%         gpupotlib = "../Potentials/gpuEmpiricalPotentials.dylib";
%     else
%         comstr = gpucompiler + gpuflags + "--shared ../Potentials/gpuEmpiricalPotentials.o -o ../Potentials/gpuEmpiricalPotentials.so";
%         gpupotlib = "../Potentials/gpuEmpiricalPotentials.so";
%     end
%     eval(char("!" + comstr));
%     %gpustr = cpucompiler + " " + gpumacros + " " + enzymemacros + " -D _CUDA main.cpp -o gpuMDP ../Core/cpuCore.a ../Core/gpuCore.a ../Potentials/gpuEmpiricalPotentials.o -ffast-math -O3 -fno-vectorize -fno-unroll-loops -fPIC -lcudart -lcublas -lblas -llapack " + enzyme;
%     gpustr = cpucompiler + " -std=c++11 " + enzymemacros + " -D _CUDA main.cpp -o gpuMDP ../Core/cpuCore.a ../Core/gpuCore.a -ffast-math -O3 -fno-unroll-loops -fPIC -lcudart -lcublas -lblas -llapack " + potlib + " " + gpupotlib + " " + enzyme;
%     eval(char("!" + gpustr));
% else
%     gpustr = "";
% end
% 
% cd(cdir);
% 
