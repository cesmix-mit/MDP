

mstr = "template <typename T> void gpuComputeXCM(T *xcm, T *axcm, T *x, T *tmp, T *mass, T *box, T masstotal, int *ilist, int *type, int *image, int triclinic, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuComputeVCM(T *vcm, T *avcm, T *v, T *tmp, T *mass, T masstotal, int *ilist, int *type, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> T gpuComputeGyration(T * ag, T *xcm, T *x, T *tmp, T *mass, T *box, T masstotal, int *ilist, int *type, int *image, int triclinic, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuComputeAngmom(T *lmom, T *p, T *xcm, T *x, T *v, T *tmp, T *mass, T *box, int *ilist, int *type, int *image, int triclinic, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuComputeTorque(T *tq, T *q, T *xcm, T *x, T *f, T *tmp, T *box, int *ilist, int *image, int triclinic, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuComputeInertia(T *inertia, T *ione, T *xcm, T *x, T *tmp, T *mass, T *box, int *ilist, int *type, int *image, int triclinic, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuComputeKEAtom(T *ke, T *mass, T *v, T mvv2e, int *type, int *ilist, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuComputeStressAtom(T *stress, T *mass, T *vatom, T *v, T mvv2e, T nktv2p, int *type, int *ilist,  int vflag, int keflag, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuComputeCentroidStressAtom(T *stress, T *mass, T *cvatom, T *v, T mvv2e, T nktv2p, int *type, int *ilist,  int vflag, int keflag, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuComputeDisplaceAtom(T *displace, T *x, T *xoriginal, T *box, int *pbc, int *ilist,  int triclinic, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuComputeTempSymTensor(T *ke_tensor, T *stress, T *v, T *tmp, T *mass, T tfactor, int *type, int *ilist, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> T gpuComputeTempScalar(T *ke, T *v, T *tmp, T *mass, T tfactor, int *type, int *ilist, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> T gpuComputePressureScalar(T *virial, T volume, T temp, T tempdof, T boltz, T nktv2p, int dim);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuComputePressureSymTensor(T *vector, T *virial, T *ke_tensor, T volume, T nktv2p, int dim);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuComputeHeatFlux(T *vector, T *jc, T *ke, T *pe, T *stress, T *v, T *tmp, T nktv2p, int *ilist,  int pressatomflag, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuComputeOrientOrderAtom(T *qnarray, T *x, T *rlist, T *cglist, T *fac, T *qnm_r, T *qnm_i, T *distsq, T cutsq, T MY_EPSILON, T QEPSILON, T MY_4PI, int *neighlist, int *neighnum,  int *ilist, int *qlist, int *nearest,  int nqlist, int qmax, int wlflag, int wlhatflag,  int qlcompflag, int iqlcomp, int qlcomp, int nnn, int jnum, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuComputeCoordAtomCutoff(int *cvec, T *x, T *rcutsq, int *type, int *ilist, int *neighlist, int *neighnum, int *typelo, int *typehi, int *jgroupbit, int dim, int ntypes, int jnum, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuComputeCoordAtomCutoff(int *carray, T *x, T *rcutsq, int *type, int *ilist, int *neighlist, int *neighnum, int *typelo, int *typehi, int *jgroupbit, int ncol, int dim, int ntypes, int jnum, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuComputeCoordAtomOrient(int *cvec, T *x, T *rcutsq, T *normv, T threshold, int *type, int *ilist, int *neighlist, int *neighnum, int *typelo, int *typehi, int *jgroupbit, int dim, int ntypes, int nqlist, int ncol, int l, int jnum, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuComputeMSD(T *msd, T *vec, T *x, T *xoriginal, T *box, T *xcm, T *tmp, int *ilist, int *image, int naverage, int avflag, int triclinic, int nmsd, int dim,  int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuComputeVACF(T *vacf, T *vec, T *v, T *voriginal, T *tmp, int *ilist, int nvacf, int dim,  int inum);";
nstr = gencorestr(mstr);

mstr = "template <typename T> void gpuVelocity(T *x, T *v, T *f, T *box, T *xcm, T *vcm, T *mass, T *second, T *omega, T *vext, T *v_lo, T *v_hi, T *coord_lo, T *coord_hi, T t_desired, T t_current, int *seed, int *save, int *map, int *image, int *type, int *coord_dim, int *vdim, int sum_flag, int dist_flag, int loop_flag, int rotation_flag, int momentum_flag, int triclinic, int dim, int mpiRank, int vmode, int nlocal, int natoms);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuSetVelocityInitialIntegrate(T *x, T *v, T *f, T *mass, T *fparam, T dtf, T dtv, int *type, int *ilist, int *iparam, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuSetVelocityFinalIntegrate(T *x, T *v, T *f, T *mass, T dtf, int *type, int *ilist, int *iparam, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuInitialIntegrate(T *x, T *v, T *f, T *mass, T *dtarray, T *tarray, T *eta_mass, T *eta, T *eta_dot, T *eta_dotdot, T vlimitsq, int *type, int *ilist, int eta_mass_flag, int biasflag, int mtchain, int nc_tchain, int mode, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuFinalIntegrate(T *x, T *v, T *f, T *mass, T *dtarray, T *tarray, T *eta_mass, T *eta, T *eta_dot, T *eta_dotdot, T vlimitsq, int *type, int *ilist, int eta_mass_flag, int biasflag, int mtchain, int nc_tchain, int mode, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> T gpuVelocityRescalingThermostat(T *v, T *mass, T *dtarray, T *tarray, T *second, T energy, int *type, int *ilist, int *seed, int *save, int biasflag, int mode, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuFixSetForce(T *x, T *v, T *f, T *eatom, T *vatom, T *fparam, int *iparam, int *ilist, int eflag_atom, int vflag_atom, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuFixLineForce(T *x, T *v, T *f, T *eatom, T *vatom, T *fparam, int *iparam, int *ilist, int eflag_atom, int vflag_atom, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuFixPlaneForce(T *x, T *v, T *f, T *eatom, T *vatom, T *fparam, int *iparam, int *ilist, int eflag_atom, int vflag_atom, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuFixAveForce(T *x, T *v, T *f, T *eatom, T *vatom, T *fparam, int *iparam, int *ilist, int eflag_atom, int vflag_atom, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuFixAddForce(T *x, T *v, T *f, T *eatom, T *vatom, T *fparam, T *box, int *iparam, int *ilist, int *image, int triclinic, int eflag_atom, int vflag_atom, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuFixDragForce(T *x, T *v, T *f, T *eatom, T *vatom, T *fparam, T *box, int *iparam, int *ilist, int *pbc, int triclinic, int eflag_atom, int vflag_atom, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuFixWallReflect(T *x, T *v, T *f, T *eatom, T *vatom, T *fparam, int *iparam, int *ilist, int eflag_atom, int vflag_atom, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuFixWallHarmonic(T *x, T *v, T *f, T *eatom, T *vatom, T *fparam, int *iparam, int *ilist, int eflag_atom, int vflag_atom, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuFixWallLJ93(T *x, T *v, T *f, T *eatom, T *vatom, T *fparam, int *iparam, int *ilist, int eflag_atom, int vflag_atom, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuFixWallLJ126(T *x, T *v, T *f, T *eatom, T *vatom, T *fparam, int *iparam, int *ilist, int eflag_atom, int vflag_atom, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuFixWallLJ1043(T *x, T *v, T *f, T *eatom, T *vatom, T *fparam, int *iparam, int *ilist, int eflag_atom, int vflag_atom, int dim, int inum);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuFixWallMorse(T *x, T *v, T *f, T *eatom, T *vatom, T *fparam, int *iparam, int *ilist, int eflag_atom, int vflag_atom, int dim, int inum);";
nstr = gencorestr(mstr);

mstr = "template <typename T> void gpuArrayTranspose(T *A, T *B, int m, int n);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuGetArrayAtColumnIndex(T *A, T *B, int *colind, int m, int n);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuArrayTransposeAtColumnIndex(T *A, T *B, int *colind, int m, int n);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuGetArrayAtRowIndex(T *A, T *B, int *rowind, int m, int n);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuArrayTransposeAtRowIndex(T *A, T *B, int *rowind, int m, int n);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuArrayRowSum(T *y, T *x, int m, int n);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuArrayRowSquareSum(T *y, T *x, int m, int n);";
nstr = gencorestr(mstr);
mstr = "template <typename T> void gpuArrayDistSquareSum(T *y, T *x1, T *x2, int m, int n);";
nstr = gencorestr(mstr);

mstr = "template <typename T> void gpuPBC(T *x, T *v, int *image, T *boxhi, T *boxlo, T *hi_lambda, T *lo_lambda, T *h, T *h_inv, T *h_rate, int *pbc, int vdeform, int triclinic, int dim, int nlocal);";
nstr = gencorestr(mstr);

