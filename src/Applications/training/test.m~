version = "0";
cdir = pwd(); ii = strfind(cdir, "Applications");
run(cdir(1:(ii-1)) + "Installation/setpath.m");

%[app,config] = initializemdp(version);
app = initializeapp(version);

app.dim = 3;          % physical dimension
app.training = 1;     % 0 -> no training, 1 -> Linear regression, 2 -> Gaussian process, 3 -> Neural net
app.maxnumneighbors = 10; % maximum number of neighbors allowed
app.runMD = 0;        % 0 no MD simulation, 1 -> run MD simulation
app.potentialform = 1;% 0 -> empirical potential, 1 -> ML potential, 2 -> combined potential    
app.neighpair = 0;    % 0 -> full neighbor list, 1 -> half neighbor list for pair potentials
app.neighcell = 0;    % 0 -> O(N^2) algorithm, 1 -> Cell-linked list algorithm to form neighbor list
app.decomposition = 0;% 0 -> force decomposition, 1 -> atom decomposition
app.descriptor = 0;   % descriptor flag: 0 -> Spherical Harmonics Bessel
app.spectrum = 2;     % spectrum flag: 0-> power spectrum, 1-> bispectrum, 2-> both power and bispectrum 
app.K = 3;            % degree of radial basis functions
app.L = 3;            % degree of spherical harmonics     
app.rcutml = 0.1;     % cut-off radius for machine learning potential
app.energycal = 1;    % turns energy calculation on or off
app.forcecal = 1;     % turns force calculation on or off
app.bcs = [0 0 0 0 0 0]; % boundary conditions
app.pbc = [1 1 1];       % periodic boundary conditions

app.natomtype = 1;  % number of atom types
app.atomnumbers = [18];
app.atommasses = [39.948];
app.atomcharges = [0];
app.appname = "test";
app.configfile = "configs/CONFIGS1";

% nonbonded pair potentials
epsilon = 0.01029849;
sigma = 3.4;
A = 4
app.np2a = 1;           % number of nonbonded pair potentials 
app.pot2a = [1];     % list of nonbonded pair potentials 
app.mu2a = [];  % parameters for all nonbonded pair potentials 
app.ncmu2a = 0;         % length of mu2a
app.rcut2a = [8.5]; % cut-off radius for each nonbonded pair potential

config = readconfig(app, 4);
app.nconfigs = config.nconfigs;     % number of configurations
[app,config] = preprocessing(app,config);




% % simulation box
% if app.dim == 3
%     a = [21.056520 0 0]';
%     b = [0 21.056520 0]';    
%     c = [0 0 21.056520]';
% else
%     a = [1 0]';
%     b = [0 1]';    
%     c = [];
% end
% 
% N = 256;   % number of atoms per configuration
% config.natom = N*ones(1, app.nconfigs); % number of atoms per each configuration
% config.natomall = sum(config.natom);    % total number of atoms in all configurations
% config.a = repmat(a, [1 app.nconfigs]); % the 1st principal vector of the simulation box per configuration
% config.b = repmat(b, [1 app.nconfigs]); % the 2nd principal vector of the simulation box per configuration
% config.c = repmat(c, [1 app.nconfigs]); % the 3rd principal vector of the simulation box per configuration
% config.e = ones(1, app.nconfigs);       % energies for all configurations
% config.t = ones(1, config.natomall);    % atom types for all configurations
% config.x = rand(app.dim, config.natomall);  % atom positions for all configurations
% config.f = ones(app.dim, config.natomall);  % atom forces for all configurations
% config.q = [];                              % atom charges for all configurations
% config.v = [];                              % atom velocities for all configurations
% 
% app.appname = "test";
% [app,config] = preprocessing(app,config);
% 
